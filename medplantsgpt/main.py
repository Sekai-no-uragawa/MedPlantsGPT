import json

import constants
import pandas as pd
import streamlit as st
import pydeck as pdk
from langchain import OpenAI
from llama_index import (Document, GPTVectorStoreIndex, LLMPredictor,
                         PromptHelper, QuestionAnswerPrompt, ServiceContext,
                         StorageContext, load_index_from_storage)
from llama_index.node_parser import SimpleNodeParser
from prompts import get_prompt
from streamlit_lottie import st_lottie
import yaml

import os
from dotenv import load_dotenv

load_dotenv()

OPENAI_API_KEY = os.environ["OPENAI_API_KEY"]
CATEGORIES = constants.CATEGORIES
REGIONS = constants.REGIONS
PLANTS_INFO = constants.PLANTS_INFO
RU_TO_EN = constants.RU_TO_EN
PLANTS = list(PLANTS_INFO.keys())


def clear_submit():
    st.session_state["submit"] = False


def get_data(disctrict=None, region=None):
    df = pd.DataFrame.from_dict({
        '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è': [
            '–û–¥—É–≤–∞–Ω—á–∏–∫_0 –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ', '–û–¥—É–≤–∞–Ω—á–∏–∫_1 –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ',
            '–û–¥—É–≤–∞–Ω—á–∏–∫_2 –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ', '–û–¥—É–≤–∞–Ω—á–∏–∫_3 –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ'
        ],
        '–ö—Ä–∞—Å–Ω–æ–∫–Ω–∏–∂–Ω—ã–π': ['‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ'],
        '–ü–∞—Ä–∞–º–µ—Ç—Ä 1': ['‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ'],
        '–ü–∞—Ä–∞–º–µ—Ç—Ä 2': ['‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ'],
        '–ü–∞—Ä–∞–º–µ—Ç—Ä 3': ['‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ'],
        '–ü–∞—Ä–∞–º–µ—Ç—Ä 4': ['‚úÖ', '‚úÖ', '‚úÖ', '‚úÖ']
    })
    return df


def get_response_model(query_str, sel_plant):
    plant = sel_plant.replace(' ', '_')

    # service_context = ServiceContext.from_defaults(llm_predictor=llm_predictor, prompt_helper=prompt_helper)

    storage_context = StorageContext.from_defaults(
        persist_dir=f"../data/storage/{plant}")
    index = load_index_from_storage(storage_context)

    query_engine = index.as_query_engine(text_qa_template=get_prompt())
    response = query_engine.query(query_str)

    return response


def main_page():
    header_div = st.container()
    contetn_div = st.container()
    with header_div:
        col1, col2 = st.columns((1, 3))

        lottie_path_teeth = 'data\plant.json'
        with open(lottie_path_teeth, "r") as f:
            lottie_teeth = json.load(f)

        with col1:
            st_lottie(
                lottie_teeth,
                loop=True,
                quality='high',
                # height=300,
                # width=200,
            )
        with col2:
            st.title('üå± –¢–æ–ª–∫–æ–≤—ã–π —Ä–∞—Å—Ç–µ–Ω–∏–µ–≤–æ–¥')
            st.markdown(
                "–£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫ –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å –∏ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\
                —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–µ—Ä–º–µ—Ä–∞–º –±—ã—Å—Ç—Ä—ã–π\
                –∏ –ø—Ä–æ—Å—Ç–æ–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤—ã—Ä–∞—Å—Ç–∏—Ç—å\
                –≤ –∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏. –ù–∞—à —Å–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ\
                —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –≤–∫–ª—é—á–∞—è —Å–µ–∑–æ–Ω—ã –ø–æ—Å–µ–≤–∞, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –∏\
                –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é\
                –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–∂–∞–π–Ω–æ—Å—Ç—å –∏ —É—Å–ø–µ—à–Ω–æ –≤–µ—Å—Ç–∏\
                —Å–≤–æ—é —Ñ–µ—Ä–º–µ—Ä—Å–∫—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞–º –∏ —Å—Ç–∞–Ω—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–º –≤ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏–∏\
                —Ä–∞—Å—Ç–µ–Ω–∏–π –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ!")
    with contetn_div:
        enter_params, search_plant = st.tabs(
            ["–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏"])
        with enter_params:
            params, tabloid = st.columns((1, 3))
            with params:
                disctricts = [x for x in REGIONS.keys()]
                sel_district = st.selectbox('–í—ã–±–µ—Ä–µ—Ç–µ –æ–∫—Ä—É–≥ –∏–∑ —Å–ø–∏—Å–∫–∞',
                                            disctricts)

                regions = REGIONS[sel_district]
                sel_region = st.selectbox('–í—ã–±–µ—Ä–µ—Ç–µ –æ–±–ª–∞—Å—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞',
                                          regions)

            with tabloid:
                table = get_data(sel_district, sel_region)
                st.dataframe(table)

        with search_plant:
            choose_plant, info = st.columns((1, 3))

            with choose_plant:
                sel_plant = st.selectbox('–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞', PLANTS)
                query = st.text_input(
                    "–°–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞")
                if query:
                    st.markdown(f'–í—ã —Å–ø—Ä–æ—Å–∏–ª–∏: {query}')
                    response = get_response_model(query, sel_plant)
                    st.markdown(f'–û—Ç–≤–µ—Ç: {response}')

            with info:
                sel_plant = sel_plant.strip().upper()
                selected_plant = PLANTS_INFO[sel_plant]
                st.markdown(f'**{sel_plant}**')
                cats = selected_plant.keys()
                cats = [x for x in cats if len(selected_plant[x]) > 0]
                with info:
                    for cat in cats:
                        with st.expander(cat):
                            st.markdown(selected_plant[cat])
                    st.text('–ö–∞—Ä—Ç–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è')
                    #MAP
                    with open("C:\\Users\\1bitt\\Documents\\projects\\MedPlantsGPT\\data\\name_to_coord.yml", "r", encoding='utf-8') as stream:
                        try:
                            name_to_coord = yaml.load(stream, Loader=yaml.Loader)
                        except yaml.YAMLError as exc:
                            print(exc)
                    right_name = sel_plant.upper()[0] + sel_plant.lower()[1:]
                    if right_name in list(RU_TO_EN.keys()):
                        coord = name_to_coord[RU_TO_EN[right_name]]
                        df = pd.DataFrame(coord, columns=['lat', 'lon'])
                        st.pydeck_chart(
                            pdk.Deck(
                                map_style='mapbox://styles/mapbox/light-v9',
                                initial_view_state=pdk.ViewState(
                                    latitude=61.160019,
                                    longitude=87.213516,
                                    zoom=3),
                                layers=[
                                    pdk.Layer('ScatterplotLayer',
                                              data=df,
                                              opacity=0.5,
                                              get_position='[lon, lat]',
                                              radius_scale=6,
                                              get_radius = 3000,
                                                auto_highlight = True,
                                              get_color=['255', '30', '30'])
                                ],
                            ))
                    else:
                        st.text('–î–∞–Ω–Ω—ã–µ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –ø—Ä–æ–∏–∑—Ä–∞—Å—Ç–∞–Ω–∏—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')

if __name__ == '__main__':
    st.set_page_config(page_title="MedPlantsGPT", page_icon="üå±", layout="wide")

    main_page()
